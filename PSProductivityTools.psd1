#
# Module manifest for module 'PSProductivityTools'
#
# Generated by: Jan Egil Ring
#
# Generated on: 03.08.2017
#

@{

# Script module or binary module file associated with this manifest.
RootModule = 'PSProductivityTools.psm1'

# Version number of this module.
ModuleVersion = '0.7'

# ID used to uniquely identify this module
GUID = 'f462209f-6b4d-4788-bd08-63e9a8b05f93'

# Author of this module
Author = 'Jan Egil Ring & Ståle Hansen'

# Company or vendor of this module
CompanyName = 'PS Community'

# Copyright statement for this module
Copyright = '(c) 2017 Jan Egil Ring & Ståle Hansen. All rights reserved.'

# Description of the functionality provided by this module
Description = 'The PSProductivityTools PowerShell module contains commands for productivity tools & topics such as time management.'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '4.0'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
ProcessorArchitecture = 'None'

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = @('Start-Pomodoro')

# Cmdlets to export from this module
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @()

# Aliases to export from this module
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        LicenseUri = 'https://raw.githubusercontent.com/janegilring/PSProductivityTools/master/LICENSE'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/janegilring/PSProductivityTools'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = '
        0.7 - Added support for launching Spotify playlists

        0.6 - Added error handling for setting Skype status and IFTT triggers
              Added test to verify Skype for Business is running

        0.5 -
        Added new variables
        [string]$EndPersonalNote ,
        [string]$IFTTMuteTrigger, #your_IFTTT_maker_mute_trigger
        [string]$IFTTUnMuteTrigger, #your_IFTTT_maker_unmute_trigger
        [string]$IFTTWebhookKey, #your_IFTTT_webhook_key

        Updated personal note to Getting stuff done, will...
        Added support for IFTTT webhooks, if not present, will not run, if present will run specified webhooks and key at the start and end
        #Turn off Vibration and mute Phone using IFTTT
        if ($IFTTMuteTrigger -ne '' -and $IFTTWebhookKey -ne ''){Invoke-RestMethod -Uri https://maker.IFTTT.com/trigger/$IFTTMuteTrigger/with/key/$IFTTWebhookKey -Method POST}
        #Turn vibration on android phone back on using IFTTT
        if ($IFTTUnMuteTrigger -ne '' -and $IFTTWebhookKey -ne ''){Invoke-RestMethod -Uri https://maker.IFTTT.com/trigger/$IFTTUnMuteTrigger/with/key/$IFTTWebhookKey -Method POST}

        Personal note will count down the 15 final seconds before you become available, because we can :)
        if ($i -lt 16){Publish-SfBContactInformation -PersonalNote "Getting stuff done, will be available in $i seconds"}

        Added $enpersonalnote at the end, blank if not specified
        Publish-SfBContactInformation -PersonalNote $EndPersonalNote
        if ($EndPersonalNote -ne ){Write-Host -Object "Pomodoro sprint session ended, set status: Available and personal note: $EndPersonalNote" -ForegroundColor Green}
        else {Write-Host -Object "Pomodoro sprint session ended, set status: Available and personal note: blank" -ForegroundColor Green}
       
        0.1 - Initial version
        '

        # External dependent modules of this module
        # ExternalModuleDependencies = ''

    } # End of PSData hashtable
    
 } # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}
